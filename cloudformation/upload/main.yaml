---
AWSTemplateFormatVersion: 2010-09-09
Description: Uploader function and API.

Parameters:

  SRCBUCKET:
    Type: String
    Description: Source S3 bucket.
  
  STOREBUCKET:
    Type: String
    Description: Destination S3 bucket.
  
  LAMBDAZIP:
    Type: String
    Default: ws-upload/main.zip
    Description: ZIP file for the Lambda function.
  
  TIER:
    Type: String
    Description: Deployment tier.
  
  IDSECRET:
    Type: String
    Description: Access Key ID for the destination bucket write permission.
    NoEcho: true

  SECSECRET:
    Type: String
    Description: Secret Access Key for the destination bucket write permission.
    NoEcho: true
  
  APINAME:
    Type: String
    Default: ws-upload-main
    Description: API name in API Gateway.
  
  COGARN:
    Type: String
    Description: ARN of the corresponding Cognito User Pool.

  COGSCOPE:
    Type: String
    Description: Authorization scope from Cognito.
  
  KEYROLE:
    Type: String
    Description: The role allowed to administer the KMS key.
    ConstraintDescription: Must be a valid IAM role in this account (preferrably the deploying user).
  
  MAPTABLE:
    Type: String
    Description: Path mappings DynamoDB table name.
  
  DOMAIN:
    Type: String
    Default: download.ni.com
    Description: Target domain name.
  
  URLEXPIRY:
    Type: Number
    Default: 3600
    Description: Pre-signed URL validity duration in seconds.
  
  UPLOADPATH:
    Type: String
    Default: upload
    Description: API endpoint path.

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: S3 Parameters
        Parameters: 
          - SRCBUCKET
          - STOREBUCKET
          - LAMBDAZIP
      - 
        Label: 
          default: API Parameters
        Parameters:
          - APINAME
          - TIER
          - COGARN
          - COGSCOPE
          - MAPTABLE
          - DOMAIN
          - URLEXPIRY
          - UPLOADPATH
      -
        Label:
          default: KMS Parameters
        Parameters:
          - KEYROLE
      -
        Label:
          default: Secrets Parameters
        Parameters:
          - IDSECRET
          - SECSECRET

Mappings:
      
  Lambda:
    common:
      memorysize: 256
      runtime: python3.8
      timeout: 60
  Gateway:
    common:
      quota: 100000
      period: MONTH
      burst: 500
      rate: 1000

Resources:
  
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${APINAME}-LambdaSecretsReadOnly-${AWS::AccountId}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess'
  
  KMSKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: Token encryption key.
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: "*"
        - Sid: Allow access for Key Administrators
          Effect: Allow
          Principal:
            AWS: !Sub ${KEYROLE}
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:TagResource
          - kms:UntagResource
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: "*"
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS:
            - !Sub arn:aws:sts::${AWS::AccountId}:assumed-role/${LambdaRole}/${APINAME}
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: "*"
        - Sid: Allow attachment of persistent resources
          Effect: Allow
          Principal:
            AWS: !Sub ${KEYROLE}
          Action:
          - kms:CreateGrant
          - kms:ListGrants
          - kms:RevokeGrant
          Resource: "*"
          Condition:
            Bool:
              kms:GrantIsForAWSResource: 'true'
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: 7
  
  IDSecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Secret Key ID for target bucket permissions.
      KmsKeyId: !Sub ${KMSKey}
      SecretString: !Sub ${IDSECRET}
    DependsOn:
      - KMSKey
    
  SecSecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Secret Access Key for target bucket permissions.
      KmsKeyId: !Sub ${KMSKey}
      SecretString: !Sub ${SECSECRET}
    DependsOn:
      - KMSKey
  
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub ${APINAME}
      Code:
        S3Bucket: !Sub ${SRCBUCKET}
        S3Key: !Sub ${LAMBDAZIP}
      Environment:
        Variables:
          KMSID: !Sub ${KMSKey}
          REGION: !Sub ${AWS::Region}
          BUCKET: !Sub ${STOREBUCKET}
          IDSECRET: !Sub ${IDSecret}
          SECSECRET: !Sub ${SecSecret}
          MAPTABLE: !Sub ${MAPTABLE}
          DOMAIN: !Sub ${DOMAIN}
          URLEXPIRY: !Sub ${URLEXPIRY}
      Handler: lambda_function.lambda_handler
      MemorySize: !FindInMap 
        - Lambda
        - common
        - memorysize
      Runtime: !FindInMap 
        - Lambda
        - common
        - runtime
      Timeout: !FindInMap 
        - Lambda
        - common
        - timeout
      Role: !Sub ${LambdaRole.Arn}
    DependsOn:
      - LambdaRole

  FunctionGW:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub ${APINAME}
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - REGIONAL

  FunctionGWAuth:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: APIAuthorizer
      IdentitySource: method.request.header.Authorization
      ProviderARNs: 
        - !Sub ${COGARN}
      RestApiId: !Sub ${FunctionGW}
      Type: COGNITO_USER_POOLS
    DependsOn: FunctionGW
  
  FunctionGWRes:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Sub ${FunctionGW.RootResourceId}
      PathPart: !Sub ${UPLOADPATH}
      RestApiId: !Sub ${FunctionGW}
    DependsOn:
      - FunctionGW
  
  FunctionGWPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: true
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Sub ${FunctionGWAuth}
      AuthorizationScopes: 
        - !Sub ${COGSCOPE}
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: 'true'
      ResourceId: !Sub ${FunctionGWRes}
      RestApiId: !Sub ${FunctionGW}
    DependsOn:
      - LambdaFunction
      - FunctionGWRes
  
  FunctionGWPermissionPOST:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Sub ${LambdaFunction.Arn}
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FunctionGW}/*/POST/${UPLOADPATH}
    DependsOn:
      - LambdaFunction
      - FunctionGWPOST

  FunctionGWOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationHttpMethod: OPTIONS
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'true'"
            "method.response.header.Access-Control-Allow-Methods": "'true'"
            "method.response.header.Access-Control-Allow-Origin": "'true'"
      ResourceId: !Sub ${FunctionGWRes}
      RestApiId: !Sub ${FunctionGW}
    DependsOn:
      - LambdaFunction
      - FunctionGWRes

  FunctionGWStage:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Sub ${FunctionGW}
      StageDescription:
        ThrottlingBurstLimit: !FindInMap 
          - Gateway
          - common
          - burst
        ThrottlingRateLimit: !FindInMap 
          - Gateway
          - common
          - rate
      StageName: !Sub ${TIER}
    DependsOn:
      - FunctionGWPOST
      - FunctionGWOPTIONS

  FunctionGWKey:
    Type: 'AWS::ApiGateway::ApiKey'
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Sub ${FunctionGW}
          StageName: !Sub ${TIER}
    DependsOn:
      - FunctionGWStage

  FunctionGWPlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Sub ${FunctionGW}
          Stage: !Sub ${TIER}
      Quota:
        Limit: !FindInMap 
          - Gateway
          - common
          - quota
        Period: !FindInMap 
          - Gateway
          - common
          - period
      Throttle:
        BurstLimit: !FindInMap 
          - Gateway
          - common
          - burst
        RateLimit: !FindInMap 
          - Gateway
          - common
          - rate
    DependsOn:
      - FunctionGWStage

  FunctionGWPlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Sub ${FunctionGWKey}
      KeyType: API_KEY
      UsagePlanId: !Sub ${FunctionGWPlan}
    DependsOn:
      - FunctionGWKey
      - FunctionGWPlan
  
Outputs:

  MainEndpoint:
    Description: API endpoint for the main function.
    Value: !Sub https://${FunctionGW}.execute-api.${AWS::Region}.amazonaws.com/${TIER}/${UPLOADPATH}
  
  LambdaRoleARN:
    Description: Lambda role ARN for KMS access in other deployments.
    Value: !Sub ${LambdaRole.Arn}
